{
	"tasks": [
		{
			"id": "task_28709",
			"reference": {
				"name": "subWorkflowStart",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks",
					"version": "9.1.0-202209072"
				}
			},
			"settings": {
				"outputs": [
					{
						"name": "MaterialData",
						"valueType": {
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": ""
						},
						"defaultValue": null
					}
				],
				"___cmf___name": "Start"
			}
		},
		{
			"id": "task_28781",
			"reference": {
				"name": "subWorkflowEnd",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks",
					"version": "9.1.0-202209072"
				}
			},
			"settings": {
				"inputs": [
					{
						"name": "MaterialData",
						"valueType": {
							"friendlyName": "MaterialData",
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null
						}
					}
				]
			}
		},
		{
			"id": "task_29612",
			"reference": {
				"name": "workflow",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks",
					"version": "9.1.0-202209072"
				}
			},
			"settings": {
				"automationWorkflow": {
					"DisplayName": "ErrorHandling",
					"IsShared": true,
					"Name": "ErrorHandling"
				},
				"executeWhenAllInputsDefined": false,
				"contextsExpirationInMilliseconds": 60000,
				"executionExpirationInMilliseconds": 1200000,
				"inputs": [
					{
						"name": "Error",
						"valueType": {
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": ""
						}
					},
					{
						"name": "ErrorCode",
						"valueType": {
							"type": 4,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": ""
						}
					},
					{
						"name": "ErrorText",
						"valueType": {
							"type": 4,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": ""
						}
					},
					{
						"name": "ResourceName",
						"valueType": {
							"type": 4,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": ""
						}
					}
				],
				"outputs": [
					{
						"name": "Error",
						"valueType": {
							"friendlyName": "Error",
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null
						}
					}
				],
				"___cmf___name": "Workflow",
				"___cmf___color": "#ff0000"
			}
		},
		{
			"id": "task_11518",
			"reference": {
				"name": "codeExecution",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks",
					"version": "9.1.0-202209072"
				}
			},
			"settings": {
				"tsCode": [
					"import { Framework } from 'framework';",
					"",
					"export default class {",
					"",
					"    /** Allows accessing external functions */",
					"    private framework: Framework;",
					"",
					"    constructor(framework: Framework) {",
					"        this.framework = framework;",
					"    }",
					"",
					"    /*",
					"     * Entry point of the class (IMPORTANT: don't change the signature of this method)",
					"     * Should return an object containing the values for each output to emit",
					"     * If necessary, use the parameter \"outputs\" to emit data while running the code.",
					"     */",
					"    public async main(inputs: any, outputs: any): Promise<any> {",
					"        const materialData = inputs.MaterialData[0];",
					"        const remoteCommandSuccessCode = \"0x00,0x04\";",
					"        let commandParameters: any[] = [];",
					"",
					"        const sendMessage: Object = {",
					"",
					"            type: \"S2F41\", item: { //replace with Stream and function intended",
					"",
					"                type: \"L\", value: [",
					"                    { type: \"A\", value: \"PP_SELECT\" }, //data id",
					"                    { type: \"L\", value: commandParameters }",
					"                ]",
					"            }",
					"        }",
					"",
					"       // get port id",
					"        commandParameters.push({",
					"            type: \"L\", value: [",
					"                { type: \"A\", value: \"PORTID\" }, //data id",
					"                { type: \"L\", value: [",
					"                    { type: \"A\", value: materialData.LoadPortPosition }",
					"                   ]",
					"                }",
					"            ]",
					"        })",
					"",
					"       // get material name",
					"        commandParameters.push({",
					"            type: \"L\", value: [",
					"                { type: \"A\", value: \"BATCHID\" }, //data id",
					"                { type: \"A\", value: materialData.MaterialName }",
					"            ]",
					"        })",
					"",
					"        // get recipe id",
					"        commandParameters.push({",
					"            type: \"L\", value: [",
					"                { type: \"A\", value: \"RECIPEID\" }, //data id",
					"                { type: \"A\", value: materialData.Recipe.NameOnEquipment }",
					"            ]",
					"        })",
					"        ",
					"        // get slot map",
					"        const slotList = [];",
					"        for (let i = 0; i < materialData.SubMaterials.length; i++) {",
					"            if (materialData.SubMaterials[i].MaterialState.toString() === \"Queued\") {",
					"            slotList.push(Number(materialData.SubMaterials[i].Slot));",
					"            }",
					"        }",
					"",
					"        commandParameters.push({",
					"            type: \"L\", value: [",
					"                { type: \"A\", value: \"SLOTMAP\" }, //data id",
					"                { type: \"U2\", value: slotList }",
					"            ]",
					"        });",
					"",
					"        const reply = await this.framework.driver.sendRaw(\"connect.iot.driver.secsgem.sendMessage\", sendMessage);",
					"        let successFound = false;",
					"        for (const successCode of remoteCommandSuccessCode.split(\",\")) {",
					"            if (reply && reply.item && parseInt(reply.item.value[0].value.data) === parseInt(successCode.trim())) {",
					"                successFound = true;",
					"                break;",
					"            }",
					"        }",
					"",
					"        if(!successFound) {",
					"            throw new Error(`PP-Select command failed with code ${reply.item.value[0].value.data.toString()}`)",
					"        }",
					"",
					"    }",
					"}"
				],
				"jsCodeBase64": "T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsNCmNsYXNzIGRlZmF1bHRfMSB7DQogICAgY29uc3RydWN0b3IoZnJhbWV3b3JrKSB7DQogICAgICAgIHRoaXMuZnJhbWV3b3JrID0gZnJhbWV3b3JrOw0KICAgIH0NCiAgICAvKg0KICAgICAqIEVudHJ5IHBvaW50IG9mIHRoZSBjbGFzcyAoSU1QT1JUQU5UOiBkb24ndCBjaGFuZ2UgdGhlIHNpZ25hdHVyZSBvZiB0aGlzIG1ldGhvZCkNCiAgICAgKiBTaG91bGQgcmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSB2YWx1ZXMgZm9yIGVhY2ggb3V0cHV0IHRvIGVtaXQNCiAgICAgKiBJZiBuZWNlc3NhcnksIHVzZSB0aGUgcGFyYW1ldGVyICJvdXRwdXRzIiB0byBlbWl0IGRhdGEgd2hpbGUgcnVubmluZyB0aGUgY29kZS4NCiAgICAgKi8NCiAgICBhc3luYyBtYWluKGlucHV0cywgb3V0cHV0cykgew0KICAgICAgICBjb25zdCBtYXRlcmlhbERhdGEgPSBpbnB1dHMuTWF0ZXJpYWxEYXRhWzBdOw0KICAgICAgICBjb25zdCByZW1vdGVDb21tYW5kU3VjY2Vzc0NvZGUgPSAiMHgwMCwweDA0IjsNCiAgICAgICAgbGV0IGNvbW1hbmRQYXJhbWV0ZXJzID0gW107DQogICAgICAgIGNvbnN0IHNlbmRNZXNzYWdlID0gew0KICAgICAgICAgICAgdHlwZTogIlMyRjQxIiwgaXRlbTogew0KICAgICAgICAgICAgICAgIHR5cGU6ICJMIiwgdmFsdWU6IFsNCiAgICAgICAgICAgICAgICAgICAgeyB0eXBlOiAiQSIsIHZhbHVlOiAiUFBfU0VMRUNUIiB9LA0KICAgICAgICAgICAgICAgICAgICB7IHR5cGU6ICJMIiwgdmFsdWU6IGNvbW1hbmRQYXJhbWV0ZXJzIH0NCiAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIC8vIGdldCBwb3J0IGlkDQogICAgICAgIGNvbW1hbmRQYXJhbWV0ZXJzLnB1c2goew0KICAgICAgICAgICAgdHlwZTogIkwiLCB2YWx1ZTogWw0KICAgICAgICAgICAgICAgIHsgdHlwZTogIkEiLCB2YWx1ZTogIlBPUlRJRCIgfSwNCiAgICAgICAgICAgICAgICB7IHR5cGU6ICJMIiwgdmFsdWU6IFsNCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdHlwZTogIkEiLCB2YWx1ZTogbWF0ZXJpYWxEYXRhLkxvYWRQb3J0UG9zaXRpb24gfQ0KICAgICAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgXQ0KICAgICAgICB9KTsNCiAgICAgICAgLy8gZ2V0IG1hdGVyaWFsIG5hbWUNCiAgICAgICAgY29tbWFuZFBhcmFtZXRlcnMucHVzaCh7DQogICAgICAgICAgICB0eXBlOiAiTCIsIHZhbHVlOiBbDQogICAgICAgICAgICAgICAgeyB0eXBlOiAiQSIsIHZhbHVlOiAiQkFUQ0hJRCIgfSwNCiAgICAgICAgICAgICAgICB7IHR5cGU6ICJBIiwgdmFsdWU6IG1hdGVyaWFsRGF0YS5NYXRlcmlhbE5hbWUgfQ0KICAgICAgICAgICAgXQ0KICAgICAgICB9KTsNCiAgICAgICAgLy8gZ2V0IHJlY2lwZSBpZA0KICAgICAgICBjb21tYW5kUGFyYW1ldGVycy5wdXNoKHsNCiAgICAgICAgICAgIHR5cGU6ICJMIiwgdmFsdWU6IFsNCiAgICAgICAgICAgICAgICB7IHR5cGU6ICJBIiwgdmFsdWU6ICJSRUNJUEVJRCIgfSwNCiAgICAgICAgICAgICAgICB7IHR5cGU6ICJBIiwgdmFsdWU6IG1hdGVyaWFsRGF0YS5SZWNpcGUuTmFtZU9uRXF1aXBtZW50IH0NCiAgICAgICAgICAgIF0NCiAgICAgICAgfSk7DQogICAgICAgIC8vIGdldCBzbG90IG1hcA0KICAgICAgICBjb25zdCBzbG90TGlzdCA9IFtdOw0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGVyaWFsRGF0YS5TdWJNYXRlcmlhbHMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgIGlmIChtYXRlcmlhbERhdGEuU3ViTWF0ZXJpYWxzW2ldLk1hdGVyaWFsU3RhdGUudG9TdHJpbmcoKSA9PT0gIlF1ZXVlZCIpIHsNCiAgICAgICAgICAgICAgICBzbG90TGlzdC5wdXNoKE51bWJlcihtYXRlcmlhbERhdGEuU3ViTWF0ZXJpYWxzW2ldLlNsb3QpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBjb21tYW5kUGFyYW1ldGVycy5wdXNoKHsNCiAgICAgICAgICAgIHR5cGU6ICJMIiwgdmFsdWU6IFsNCiAgICAgICAgICAgICAgICB7IHR5cGU6ICJBIiwgdmFsdWU6ICJTTE9UTUFQIiB9LA0KICAgICAgICAgICAgICAgIHsgdHlwZTogIlUyIiwgdmFsdWU6IHNsb3RMaXN0IH0NCiAgICAgICAgICAgIF0NCiAgICAgICAgfSk7DQogICAgICAgIGNvbnN0IHJlcGx5ID0gYXdhaXQgdGhpcy5mcmFtZXdvcmsuZHJpdmVyLnNlbmRSYXcoImNvbm5lY3QuaW90LmRyaXZlci5zZWNzZ2VtLnNlbmRNZXNzYWdlIiwgc2VuZE1lc3NhZ2UpOw0KICAgICAgICBsZXQgc3VjY2Vzc0ZvdW5kID0gZmFsc2U7DQogICAgICAgIGZvciAoY29uc3Qgc3VjY2Vzc0NvZGUgb2YgcmVtb3RlQ29tbWFuZFN1Y2Nlc3NDb2RlLnNwbGl0KCIsIikpIHsNCiAgICAgICAgICAgIGlmIChyZXBseSAmJiByZXBseS5pdGVtICYmIHBhcnNlSW50KHJlcGx5Lml0ZW0udmFsdWVbMF0udmFsdWUuZGF0YSkgPT09IHBhcnNlSW50KHN1Y2Nlc3NDb2RlLnRyaW0oKSkpIHsNCiAgICAgICAgICAgICAgICBzdWNjZXNzRm91bmQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmICghc3VjY2Vzc0ZvdW5kKSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBQLVNlbGVjdCBjb21tYW5kIGZhaWxlZCB3aXRoIGNvZGUgJHtyZXBseS5pdGVtLnZhbHVlWzBdLnZhbHVlLmRhdGEudG9TdHJpbmcoKX1gKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCmV4cG9ydHMuZGVmYXVsdCA9IGRlZmF1bHRfMTsNCg==",
				"inputs": [
					{
						"name": "MaterialData",
						"valueType": {
							"friendlyName": "MaterialData",
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null
						}
					}
				],
				"outputs": [],
				"contextExpirationInMilliseconds": 10000,
				"executionExpirationInMilliseconds": 0,
				"___cmf___name": "Code"
			},
			"driver": "SecsGemEquipment"
		}
	],
	"converters": [
		{
			"id": "@criticalmanufacturing/connect-iot-custom-utilities-amsosram-tasks#anyToErrorCodeConstant",
			"reference": {
				"name": "anyToErrorCodeConstant",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-custom-utilities-amsosram-tasks",
					"version": "2.0.0"
				}
			}
		}
	],
	"links": [
		{
			"id": "ccb69b57-6ab4-4c00-a904-d6df674c72da",
			"sourceId": "task_28709",
			"targetId": "task_28781",
			"inputName": "MaterialData",
			"outputName": "MaterialDataOut"
		},
		{
			"id": "a2e0d65f-1dac-4282-919b-d2f36d569e00",
			"sourceId": "task_29612",
			"targetId": "task_28781",
			"inputName": "error",
			"outputName": "ErrorOut"
		},
		{
			"id": "86ad55fd-f947-4187-809e-4c3d1b013e56",
			"sourceId": "task_28709",
			"targetId": "task_11518",
			"inputName": "MaterialDataIn",
			"outputName": "MaterialDataOut"
		},
		{
			"id": "ff557de4-383c-473a-a257-4f27b4259979",
			"sourceId": "task_28709",
			"targetId": "task_11518",
			"inputName": "activate",
			"outputName": "activateOut"
		},
		{
			"id": "2972e7b2-c6c8-4e65-991f-d2b8d4c877fe",
			"sourceId": "task_11518",
			"targetId": "task_29612",
			"inputName": "ErrorIn",
			"outputName": "error"
		},
		{
			"id": "7317c843-c010-4362-a477-5395173fb05d",
			"sourceId": "task_11518",
			"targetId": "task_29612",
			"inputName": "activate",
			"outputName": "error"
		},
		{
			"id": "f8b6c1d6-5c75-4d6f-855a-e6e785cbcc5e",
			"sourceId": "task_11518",
			"targetId": "task_28781",
			"inputName": "success",
			"outputName": "success"
		},
		{
			"id": "7cdbc5ba-a51e-46e8-aef1-d08ba183fd56",
			"sourceId": "task_11518",
			"targetId": "task_29612",
			"inputName": "ErrorCodeIn",
			"outputName": "error",
			"converters": [
				{
					"id": "@criticalmanufacturing/connect-iot-custom-utilities-amsosram-tasks#anyToErrorCodeConstant",
					"params": {
						"ErrorCode": "PPSelectFailed",
						"ErrorNumber": 0
					}
				}
			]
		}
	],
	"layout": {
		"general": {
			"color": "#ffff80",
			"notes": [
				{
					"id": "note_31411",
					"name": "How to use it",
					"value": "<p><strong>What it does:</strong></p><p>This Workflow should execute the PP-Select remote command.</p><p><strong>How to use it:</strong></p><ol><li>On the Execute Command Task select the PP-Select command to your tool;</li><li>Parse the needed information from the MaterialData object using a Expression evaluator;</li></ol><p><strong>Note:</strong></p><p>If the inputs for the command are complex enough replace parsing and command execution task with a Code task</p><p>To execute a Command via code you can use the following code snippet (contains command call and validation.</p><div style=\"background-color:#fffffe;font-family:Consolas, 'Courier New', monospace;font-size:14px;line-height:19px;white-space:pre;\"><div style=\"background-color:#fffffe;font-family:Consolas, 'Courier New', monospace;font-size:14px;line-height:19px;white-space:pre;\"><span style=\"color:#0000ff;\">const</span> remoteCommandSuccessCode = <span style=\"color:#a31515;\">\"0x00,0x04\"</span>;</div><p><span style=\"color:#0000ff;\">let</span> commandParameters: <span style=\"color:#0000ff;\">any</span>[] = [];</p><p><span style=\"color:#0000ff;\">const</span> sendMessage: Object = {</p><p><span style=\"color:#0000ff;\">type</span>: <span style=\"color:#a31515;\">\"S2F41\" </span>, item: { <span style=\"color:#008000;\">//replace with Stream and function intended</span></p></div><div style=\"background-color:#fffffe;font-family:Consolas, 'Courier New', monospace;font-size:14px;line-height:19px;white-space:pre;\"><div style=\"margin-left:60px;\"><span style=\"color:#0000ff;\">type</span>: <span style=\"color:#a31515;\">\"L\"</span>, value: [</div><div style=\"margin-left:90px;\">{ <span style=\"color:#0000ff;\">type</span>: <span style=\"color:#a31515;\">\"A\"</span>, value: <span style=\"color:#a31515;\">\"PP_SELECT\"</span> }, <span style=\"color:#008000;\">//data id</span></div><div style=\"margin-left:90px;\">{ <span style=\"color:#0000ff;\">type</span>: <span style=\"color:#a31515;\">\"L\"</span>, value: commandParameters}</div><div style=\"margin-left:60px;\">]}</div><div style=\"margin-left:30px;\">} </div><div></div><div><span style=\"color:#0000ff;\">const</span> reply = <span style=\"color:#0000ff;\">await</span> <span style=\"color:#0000ff;\">this</span>.framework.driver.sendRaw(<span style=\"color:#a31515;\">\"connect.iot.driver.secsgem.sendMessage\"</span>, sendMessage);</div><div><span style=\"color:#0000ff;\">let</span> successFound = <span style=\"color:#0000ff;\">false</span>;</div><div><span style=\"color:#0000ff;\">for</span> (<span style=\"color:#0000ff;\">const</span> successCode <span style=\"color:#0000ff;\">of</span> remoteCommandSuccessCode.split(<span style=\"color:#a31515;\">\",\"</span>)) {</div><div style=\"margin-left:30px;\"><span style=\"color:#0000ff;\">if</span> (reply &amp;&amp; reply.item &amp;&amp; parseInt(reply.item.value[<span style=\"color:#09885a;\">0</span>].value.data) === parseInt(successCode.trim())) {</div><div style=\"margin-left:30px;\">successFound = <span style=\"color:#0000ff;\">true</span>;</div><div style=\"margin-left:30px;\"><span style=\"color:#0000ff;\">break</span>;</div><div>}</div></div>",
					"color": "#ffffa5"
				}
			]
		},
		"drawers": {
			"DIAGRAM": {
				"tasks": {
					"task_28781": {
						"collapsed": false,
						"position": {
							"x": 3410,
							"y": 798
						},
						"outdated": false
					},
					"task_28709": {
						"collapsed": false,
						"position": {
							"x": 953,
							"y": 775
						},
						"outdated": false
					},
					"task_29612": {
						"collapsed": false,
						"position": {
							"x": 2787,
							"y": 1164
						},
						"outdated": false
					},
					"task_11518": {
						"collapsed": false,
						"position": {
							"x": 1956,
							"y": 1013
						},
						"outdated": false
					}
				},
				"links": {
					"ccb69b57-6ab4-4c00-a904-d6df674c72da": {
						"vertices": []
					},
					"a2e0d65f-1dac-4282-919b-d2f36d569e00": {
						"vertices": []
					},
					"86ad55fd-f947-4187-809e-4c3d1b013e56": {
						"vertices": []
					},
					"ff557de4-383c-473a-a257-4f27b4259979": {
						"vertices": []
					},
					"2972e7b2-c6c8-4e65-991f-d2b8d4c877fe": {
						"vertices": []
					},
					"7317c843-c010-4362-a477-5395173fb05d": {
						"vertices": []
					},
					"f8b6c1d6-5c75-4d6f-855a-e6e785cbcc5e": {
						"vertices": []
					},
					"7cdbc5ba-a51e-46e8-aef1-d08ba183fd56": {
						"vertices": []
					}
				},
				"notes": {
					"note_31411": {
						"collapsed": false,
						"position": {
							"x": 1568,
							"y": 1243
						}
					}
				},
				"zoom": 0.6399999999999998,
				"pan": {
					"x": 695.6153561053491,
					"y": 419.00327876130734
				}
			}
		}
	}
}
