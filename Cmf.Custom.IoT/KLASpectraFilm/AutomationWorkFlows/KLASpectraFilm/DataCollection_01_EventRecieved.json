{
	"tasks": [
		{
			"id": "task_14097",
			"reference": {
				"name": "equipmentEvent",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks",
					"version": "9.1.0-202209072"
				}
			},
			"settings": {
				"_workingMode": "AlwaysActive",
				"_acceptAllEvents": false,
				"_outputs": [
					{
						"property": {
							"$type": "Cmf.Foundation.BusinessObjects.AutomationProperty, Cmf.Foundation.BusinessObjects",
							"Name": "DP_SECD_LotSummary",
							"DataType": 9
						},
						"outputType": "RawValue"
					},
					{
						"property": {
							"$type": "Cmf.Foundation.BusinessObjects.AutomationProperty, Cmf.Foundation.BusinessObjects",
							"Name": "DP_SE_RawMeasurementsEx",
							"DataType": 9
						},
						"outputType": "RawValue"
					},
					{
						"property": {
							"$type": "Cmf.Foundation.BusinessObjects.AutomationProperty, Cmf.Foundation.BusinessObjects",
							"Name": "DP_SE_RawMeasurementsDeepFormat",
							"DataType": 9
						},
						"outputType": "RawValue"
					}
				],
				"___cmf___name": "On Equipment Event",
				"_events": [
					{
						"$type": "Cmf.Foundation.BusinessObjects.AutomationEvent, Cmf.Foundation.BusinessObjects",
						"Name": "Wafer_MeasurementDataReady"
					}
				],
				"___cmf___description": "Wafer_MeasurementDataReady (704)"
			},
			"driver": "SecsGemEquipment"
		},
		{
			"id": "task_14532",
			"reference": {
				"name": "codeExecution",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks",
					"version": "9.1.0-202209072"
				}
			},
			"settings": {
				"tsCode": [
					"import { Framework } from 'framework';",
					"export default class {",
					"    /** Allows accessing external functions */",
					"    private framework: Framework;",
					"    constructor(framework: Framework) {",
					"        this.framework = framework;",
					"    }",
					"    /*",
					"     * Entry point of the class (IMPORTANT: don't change the signature of this method)",
					"     * Should return an object containing the values for each output to emit",
					"     * If necessary, use the parameter \"outputs\" to emit data while running the code.",
					"     */",
					"    public async main(inputs: any, outputs: any): Promise<any> {",
					"        // Add code here",
					"        const eventRawData = inputs.eventRawData;",
					"        let raw: { [key: string]: any } = {};",
					"        const setProperty = ((propertyName: string, sampleId: string, value: any) => {",
					"            if (!raw[propertyName]) {",
					"                raw[propertyName] = {};",
					"                raw[propertyName][\"sampleId\"] = [];",
					"                raw[propertyName][\"value\"] = [];",
					"            }",
					"            raw[propertyName][\"sampleId\"].push(sampleId);",
					"            raw[propertyName][\"value\"].push(value);",
					"        });",
					"        const objectToDataCollection = ((obj: any, prefix: string) => {",
					"            (Object.keys(waferData) as (keyof typeof waferData)[]).forEach((key, index) => {",
					"                setProperty(prefix + key + '', waferId, waferData[key].length === 1 ? waferData[key][0] : waferData[key]);",
					"            });",
					"        });",
					"        var rawMeasurementsDeep = (<any[]>eventRawData.values).find(v => v.property.Name === \"DP_SE_RawMeasurementsDeepFormat\");",
					"        // Get generic info",
					"        var waferData = this.getData(null, [rawMeasurementsDeep.originalValue.value[0]]);",
					"        const lotId = waferData['Lot ID'][0];",
					"        if (lotId == null) {",
					"            throw new Error(\"Empty LotID\");",
					"        }",
					"        const waferId = waferData['Wafer ID'][0];",
					"        if (waferId == null) {",
					"            throw new Error(\"Empty WaferID\");",
					"        }",
					"        // Add generic info to data collection",
					"        objectToDataCollection(waferData, '');",
					"        // Get each test info",
					"        for (let i = 1; i <= waferData['Number Of ADS Tests'][0]; i++) {",
					"            let test = this.getArrayFromKey([rawMeasurementsDeep.originalValue.value[1]], 'ADS Test#' + i + ' Frame');",
					"            let testData = this.getData(null, test.data.value);",
					"            // Add generic test info to data collection",
					"            objectToDataCollection(testData, 'Test#' + i + '.');",
					"            // Get X / Y coordinates and add it to data collection",
					"            let resXY = this.getValue(test.data.value, 'Sites X / Y Coordinates');",
					"            if (resXY) {",
					"                resXY.forEach((element: any) => {",
					"                    setProperty('Test#' + i + '.X', waferId, element[0]);",
					"                    setProperty('Test#' + i + '.Y', waferId, element[1]);",
					"                });",
					"            }",
					"            // get Sites Row / Column and add it to data collection",
					"            let resRowColumn = this.getValue(test.data.value, 'Sites Row / Column');",
					"            if (resRowColumn) {",
					"                resRowColumn.forEach((element: any) => {",
					"                    setProperty('Test#' + i + '.Row', waferId, element[0]);",
					"                    setProperty('Test#' + i + '.Column', waferId, element[1]);",
					"                });",
					"            }",
					"            // get data for each frame",
					"            const numberOfResults = testData['Number of measurement Results'][0]",
					"            for (let j = 1; j <= numberOfResults; j++) {",
					"                let dataFrame = this.getArrayFromKey(test.data.value, 'IDS #' + j + ' Data Frame');",
					"                let resultDataFrame = this.getData(null, dataFrame.data.value);",
					"                let typeString = resultDataFrame['Result Type String'];",
					"                // Add frame info to data collection",
					"                objectToDataCollection(resultDataFrame, 'Test#' + i + '.' + typeString + '.');",
					"                // get results raw data and add it to data collection",
					"                const resRawData = this.getValue(dataFrame.data.value, 'Measurement Raw Data');",
					"                if (resRawData) {",
					"                    resRawData.forEach((element: any) => {",
					"                        setProperty('Test#' + i + '.' + typeString + '.MeasurementRawData', waferId, element);",
					"                    });",
					"                }",
					"                // get results data range and add it to data collection",
					"                const resDataRange = this.getValue(dataFrame.data.value, 'Measurement Data Range');",
					"                if (resDataRange) {",
					"                    resDataRange.forEach((element: any) => {",
					"                        setProperty('Test#' + i + '.' + typeString + '.MeasurementDataRange', waferId, element);",
					"                    });",
					"                }",
					"            }",
					"        }",
					"",
					"        //this.framework.logger.error(JSON.stringify(raw));",
					"        return {",
					"            rawDataCollection: raw,",
					"            materialName: lotId,",
					"            subMaterialName: waferId",
					"        }",
					"        // emit output during execution: outputs.output1.emit(\"something\");",
					"        // return example: return { output1: inputs.input1, output2: \"Hello World\" };",
					"    }",
					"    /** Get all direct key/value pairs inside the event */",
					"    private getData(resultData: { [key: string]: any } | null, values: any[]): { [key: string]: any } {",
					"        if (!resultData) {",
					"            resultData = {};",
					"        }",
					"        let propertyName: string;",
					"        var value: any;",
					"        if (values.length >= 1) {",
					"            for (let i = 0; i < values.length; i++) {",
					"                let elm = values[i];",
					"                if (elm.type === 'L') {",
					"                    this.getData(resultData, elm.value);",
					"                    continue;",
					"                } else {",
					"                    propertyName = elm.value;",
					"                    i++;",
					"                    let valElm = values[i];",
					"                    if (!valElm) continue;",
					"                    if (valElm.type === 'L') {",
					"                        this.getData(resultData, valElm.value);",
					"                        continue;",
					"                    }",
					"                    if (elm.type !== 'A') continue;",
					"                    if (!Array.isArray(valElm.value)) {",
					"                        value = valElm.value;",
					"                        if (!resultData[propertyName]) {",
					"                            resultData[propertyName] = [];",
					"                        }",
					"                        resultData[propertyName].push(value);",
					"                    }",
					"                }",
					"            }",
					"        }",
					"        return resultData;",
					"    }",
					"    /** Gets an children from key node */",
					"    private getArrayFromKey(list: any[], key: string): any {",
					"        for (let i = 0; i < list.length; i++) {",
					"            let elm = list[i];",
					"            if (elm.type === 'L') {",
					"                const res = this.getArrayFromKey(elm.value, key);",
					"                if (res) {",
					"                    return res;",
					"                }",
					"                continue;",
					"            }",
					"            if (elm.type === 'A' && elm.value === key) {",
					"                return { name: elm.value, data: list[1] }",
					"            }",
					"        }",
					"    }",
					"    /** Get a value from a key */",
					"    private getValue(list: any[], key: string): any {",
					"        var res = this.getArrayFromKey(list, key);",
					"        if (res && res.data && res.data.value) {",
					"            var resValue: any = [];",
					"            if (Array.isArray(res.data.value)) {",
					"                res.data.value.forEach((element: any) => {",
					"                    resValue.push(element.value);",
					"                });",
					"            } else {",
					"                return res.data.value;",
					"            }",
					"            return resValue;",
					"        }",
					"    };",
					"}"
				],
				"jsCodeBase64": "",
				"inputs": [
					{
						"name": "eventRawData",
						"valueType": {
							"friendlyName": "eventRawData",
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null
						}
					},
					{
						"name": "DP_SECD_LotSummary",
						"valueType": {
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": "DP_SECD_LotSummary"
						},
						"defaultValue": null
					},
					{
						"name": "DP_SE_RawMeasurementsEx",
						"valueType": {
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": "DP_SE_RawMeasurementsEx"
						},
						"defaultValue": null
					},
					{
						"name": "DP_SE_RawMeasurementsDeepFormat",
						"valueType": {
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": "DP_SE_RawMeasurementsDeepFormat"
						},
						"defaultValue": null
					}
				],
				"outputs": [
					{
						"name": "rawDataCollection",
						"valueType": {
							"type": 10,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": "rawDataCollection"
						},
						"defaultValue": null
					},
					{
						"name": "materialName",
						"valueType": {
							"type": 4,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": "materialName"
						},
						"defaultValue": null
					},
					{
						"name": "subMaterialName",
						"valueType": {
							"type": 4,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": "subMaterialName"
						},
						"defaultValue": null
					}
				],
				"contextExpirationInMilliseconds": 10000,
				"executionExpirationInMilliseconds": 0,
				"___cmf___name": "Code"
			}
		},
		{
			"id": "task_14913",
			"reference": {
				"name": "retrieve",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks",
					"version": "9.1.0-202209072"
				}
			},
			"settings": {
				"_retrieveOnValueChange": false,
				"_emitInNewContext": false,
				"___cmf___name": "Retrieve Data",
				"_outputs": [
					{
						"name": "ResourceName",
						"valueType": {
							"type": 4,
							"collectionType": 0,
							"referenceType": null,
							"referenceTypeName": null,
							"referenceTypeId": null,
							"friendlyName": "ResourceName"
						},
						"defaultValue": "\"\"",
						"identifier": "Generic_ResourceName"
					}
				]
			}
		},
		{
			"id": "task_13977",
			"reference": {
				"name": "dataCollection",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-mes-tasks",
					"version": "9.1.0-202209072"
				}
			},
			"settings": {
				"defaultDataCollection": null,
				"complexPerformDataCollectionMode": 1,
				"dataCollectionLimitSet": null,
				"defaultMaterial": null,
				"defaultResource": null,
				"isToIgnoreInSPC": false,
				"skipDCValidation": false,
				"inputs": [],
				"retries": 30,
				"sleepBetweenRetries": 1000,
				"autoClear": false,
				"___cmf___name": "Data Collection"
			}
		}
	],
	"converters": [
		{
			"id": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks#stringToEntityInstance",
			"reference": {
				"name": "stringToEntityInstance",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks",
					"version": "9.1.0-202209072"
				}
			}
		},
		{
			"id": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks#anyToAny",
			"reference": {
				"name": "anyToAny",
				"package": {
					"name": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks",
					"version": "9.1.0-202209072"
				}
			}
		}
	],
	"links": [
		{
			"id": "64c545f3-5eee-40e1-bf74-8187dce1bbfa",
			"sourceId": "task_14097",
			"targetId": "task_14532",
			"inputName": "eventRawDataIn",
			"outputName": "eventRawData"
		},
		{
			"id": "f28735cc-bcbd-461e-a359-acc9523de425",
			"sourceId": "task_14097",
			"targetId": "task_14532",
			"inputName": "activate",
			"outputName": "eventRawData"
		},
		{
			"id": "f61a1e49-a5a7-42c5-9a11-4fef228a73a2",
			"sourceId": "task_14532",
			"targetId": "task_13977",
			"inputName": "rawData",
			"outputName": "rawDataCollectionOut"
		},
		{
			"id": "0d59be9c-35d3-42b1-b08e-5013fe79fab3",
			"sourceId": "task_14532",
			"targetId": "task_14913",
			"inputName": "activate",
			"outputName": "success"
		},
		{
			"id": "996bcd67-482a-44b6-a29e-51cddfdab105",
			"sourceId": "task_14913",
			"targetId": "task_13977",
			"inputName": "resource",
			"outputName": "ResourceName",
			"converters": [
				{
					"id": "@criticalmanufacturing/connect-iot-controller-engine-core-tasks#stringToEntityInstance",
					"params": {
						"entityType": "Resource",
						"identifier": "Name"
					}
				}
			]
		}
	],
	"layout": {
		"general": {
			"color": "#00ff80",
			"notes": []
		},
		"drawers": {
			"DIAGRAM": {
				"tasks": {
					"task_14097": {
						"collapsed": false,
						"position": {
							"x": 321,
							"y": 91
						},
						"outdated": false
					},
					"task_14532": {
						"collapsed": false,
						"position": {
							"x": 886,
							"y": 94
						},
						"outdated": false
					},
					"task_14913": {
						"collapsed": false,
						"position": {
							"x": 1413,
							"y": 88
						},
						"outdated": false
					},
					"task_13977": {
						"collapsed": false,
						"position": {
							"x": 1902,
							"y": 87
						},
						"outdated": false
					}
				},
				"links": {
					"64c545f3-5eee-40e1-bf74-8187dce1bbfa": {
						"vertices": []
					},
					"f28735cc-bcbd-461e-a359-acc9523de425": {
						"vertices": []
					},
					"f61a1e49-a5a7-42c5-9a11-4fef228a73a2": {
						"vertices": [
							{
								"x": 1505,
								"y": 381
							}
						]
					},
					"0d59be9c-35d3-42b1-b08e-5013fe79fab3": {
						"vertices": []
					},
					"996bcd67-482a-44b6-a29e-51cddfdab105": {
						"vertices": []
					}
				},
				"notes": {},
				"zoom": 0.7599999999999999,
				"pan": {
					"x": 0,
					"y": 0
				}
			}
		}
	}
}